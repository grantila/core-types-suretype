// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convertJsonSchemaToSureType export recursive and non-recursive at once 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, raw, compile, TypeOf } from 'suretype';

/**
 * These cyclic types need to be treated as raw JSON Schema
 *
 * Cyclic types cannot be deduced from typeof in TypeScript
 */
const rawSchemaObject = {
    definitions: {
        User: {
            type: "object",
            description: "The User type\\nyada yada",
            properties: {
                obj: {
                    type: "object",
                    description: "This is a relatively long title, triggering line breaks\\n\\nThis is a typical foo",
                    default: {
                        prop: "there is currently no default provided..."
                    },
                    properties: {
                        prop: {
                            type: "string"
                        }
                    }
                },
                arr: {
                    type: "array",
                    items: {
                        type: "boolean"
                    },
                    minItems: 2,
                    maxItems: 5
                },
                tup: {
                    type: "array",
                    items: [{
                            type: "string"
                        }, {
                            type: "number"
                        }],
                    additionalItems: {
                        type: "boolean"
                    }
                },
                str: {
                    type: "string",
                    minLength: 3,
                    anyOf: [{
                            format: "email"
                        }, {
                            format: "ipv4"
                        }]
                },
                num: {
                    type: "number",
                    minimum: 5,
                    maximum: 10
                },
                int: {
                    type: "integer",
                    enum: [1, 2, 3, 4, 5, 10]
                },
                email: {
                    $ref: "#/definitions/Email"
                },
                bool: {
                    type: "boolean",
                    const: false
                },
                nul: {
                    type: "null"
                },
                any_of: {
                    anyOf: [{
                            type: "string"
                        }, {
                            $ref: "#/definitions/User",
                            description: "foo"
                        }]
                },
                all_of: {
                    allOf: [{
                            type: "object",
                            properties: {
                                x: {
                                    description: "This is the x number",
                                    type: "number"
                                }
                            }
                        }, {
                            $ref: "#/definitions/User"
                        }]
                }
            },
            required: ["obj", "arr", "num", "bool"],
            additionalProperties: false
        },
        Email: {}
    }
};

/** The validation schema for a User */
export const schemaUser = raw<User>(rawSchemaObject, "User");

/**
 * The User type
 * yada yada
 */
export interface User {
    /**
     * This is a relatively long title, triggering line breaks
     *
     * This is a typical foo
     *
     * @default
     *     {
     *       "prop": "there is currently no default provided..."
     *     }
     */
    obj: {
        prop?: string;
        [key: string]: any;
    };
    arr: boolean[];
    tup?: [
        string,
        number,
        ...boolean[]
    ];
    str?: any;
    num: number;
    int?: 1 | 2 | 3 | 4 | 5 | 10;
    email?: Email;
    bool: boolean;
    nul?: null;
    any_of?: string | User;
    all_of?: {
        /** This is the x number */
        x?: number;
        [key: string]: any;
    } & User;
}

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });

/** The validation schema for a Email */
export const schemaEmail = raw<Email>(rawSchemaObject, "Email");

export type Email = any;

/**
 * ## Validate that a variable is a Email
 *
 * @returns ValidationResult
 */
export const validateEmail = compile(schemaEmail);

/**
 * ## Ensure a variable is a Email
 *
 * This call will throw a ValidationError if the variable isn't a Email.
 *
 * If the variable **is** a Email, the returned variable will be of that type.
 */
export const ensureEmail = compile<typeof schemaEmail, Email>(schemaEmail, { ensure: true });

/**
 * ## Validates that a variable is a Email
 *
 * @returns boolean
 */
export const isEmail = compile(schemaEmail, { simple: true });

/** The validation schema for a Link */
export const schemaLink = suretype({
    name: "Link"
}, v.object({
    url: v.string(),
    meta: v.any()
}).additional(true));

export type Link = TypeOf<typeof schemaLink>;

/**
 * ## Validate that a variable is a Link
 *
 * @returns ValidationResult
 */
export const validateLink = compile(schemaLink);

/**
 * ## Ensure a variable is a Link
 *
 * This call will throw a ValidationError if the variable isn't a Link.
 *
 * If the variable **is** a Link, the returned variable will be of that type.
 */
export const ensureLink = compile<typeof schemaLink, Link>(schemaLink, { ensure: true });

/**
 * ## Validates that a variable is a Link
 *
 * @returns boolean
 */
export const isLink = compile(schemaLink, { simple: true });

/** The validation schema for a Product */
export const schemaProduct = suretype({
    name: "Product"
}, v.object({
    link: schemaLink
}).additional(true));

export type Product = TypeOf<typeof schemaProduct>;

/**
 * ## Validate that a variable is a Product
 *
 * @returns ValidationResult
 */
export const validateProduct = compile(schemaProduct);

/**
 * ## Ensure a variable is a Product
 *
 * This call will throw a ValidationError if the variable isn't a Product.
 *
 * If the variable **is** a Product, the returned variable will be of that type.
 */
export const ensureProduct = compile<typeof schemaProduct, Product>(schemaProduct, { ensure: true });

/**
 * ## Validates that a variable is a Product
 *
 * @returns boolean
 */
export const isProduct = compile(schemaProduct, { simple: true });
"
`;

exports[`convertJsonSchemaToSureType non-recursive types export matrix 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile, annotate, TypeOf } from 'suretype';

/** The validation schema for a Link */
export const schemaLink = suretype({
    name: "Link"
}, v.object({
    url: v.string(),
    meta: v.unknown()
}).additional(true));

export type Link = TypeOf<typeof schemaLink>;

/**
 * ## Validate that a variable is a Link
 *
 * @returns ValidationResult
 */
export const validateLink = compile(schemaLink);

/**
 * ## Ensure a variable is a Link
 *
 * This call will throw a ValidationError if the variable isn't a Link.
 *
 * If the variable **is** a Link, the returned variable will be of that type.
 */
export const ensureLink = compile<typeof schemaLink, Link>(schemaLink, { ensure: true });

/**
 * ## Validates that a variable is a Link
 *
 * @returns boolean
 */
export const isLink = compile(schemaLink, { simple: true });

/** The validation schema for a Product */
export const schemaProduct = suretype({
    name: "Product"
}, v.object({
    link: schemaLink
}).additional(true));

export type Product = TypeOf<typeof schemaProduct>;

/**
 * ## Validate that a variable is a Product
 *
 * @returns ValidationResult
 */
export const validateProduct = compile(schemaProduct);

/**
 * ## Ensure a variable is a Product
 *
 * This call will throw a ValidationError if the variable isn't a Product.
 *
 * If the variable **is** a Product, the returned variable will be of that type.
 */
export const ensureProduct = compile<typeof schemaProduct, Product>(schemaProduct, { ensure: true });

/**
 * ## Validates that a variable is a Product
 *
 * @returns boolean
 */
export const isProduct = compile(schemaProduct, { simple: true });

/** The validation schema for a Email */
export const schemaEmail = suretype({
    name: "Email"
}, v.unknown());

export type Email = TypeOf<typeof schemaEmail>;

/**
 * ## Validate that a variable is a Email
 *
 * @returns ValidationResult
 */
export const validateEmail = compile(schemaEmail);

/**
 * ## Ensure a variable is a Email
 *
 * This call will throw a ValidationError if the variable isn't a Email.
 *
 * If the variable **is** a Email, the returned variable will be of that type.
 */
export const ensureEmail = compile<typeof schemaEmail, Email>(schemaEmail, { ensure: true });

/**
 * ## Validates that a variable is a Email
 *
 * @returns boolean
 */
export const isEmail = compile(schemaEmail, { simple: true });

/** The validation schema for a User */
export const schemaUser = suretype({
    name: "User",
    description: "The User type\\nyada yada"
}, v.object({
    obj: annotate({
        description: "This is a relatively long title, triggering line breaks\\n\\nThis is a typical foo\\n\\n@default\\n    {\\n      \\"prop\\": \\"there is currently no default provided...\\"\\n    }"
    }, v.object({
        prop: v.string()
    }).additional(true).default({
        prop: "there is currently no default provided..."
    }).required()),
    arr: v.array(v.boolean()).minItems(2).maxItems(5).required(),
    tup: v.array([
        v.string(),
        v.number()
    ]).additional(v.boolean()),
    str: v.string().minLength(3).anyOf([v.string().format("email"), v.string().format("ipv4")]),
    num: v.number().gte(5).lt(10).required(),
    int: v.number().integer().enum(1, 2, 3, 4, 5, 10),
    email: schemaEmail,
    bool: v.boolean().const(false).required(),
    nul: v.null(),
    any_of: v.anyOf([v.string(), v.number()]),
    all_of: v.allOf([v.object({
            x: annotate({
                description: "This is the x number"
            }, v.number())
        }).additional(true), v.string()])
}));

export type User = TypeOf<typeof schemaUser>;

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });
"
`;

exports[`convertJsonSchemaToSureType non-recursive types export matrix 2`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile, annotate } from 'suretype';

/** The validation schema for a Link */
export const schemaLink = suretype({
    name: "Link"
}, v.object({
    url: v.string(),
    meta: v.any()
}).additional(true));

export interface Link {
    url?: string;
    meta?: any;
    [key: string]: any;
}

/**
 * ## Validate that a variable is a Link
 *
 * @returns ValidationResult
 */
export const validateLink = compile(schemaLink);

/**
 * ## Ensure a variable is a Link
 *
 * This call will throw a ValidationError if the variable isn't a Link.
 *
 * If the variable **is** a Link, the returned variable will be of that type.
 */
export const ensureLink = compile<typeof schemaLink, Link>(schemaLink, { ensure: true });

/**
 * ## Validates that a variable is a Link
 *
 * @returns boolean
 */
export const isLink = compile(schemaLink, { simple: true });

/** The validation schema for a Product */
export const schemaProduct = suretype({
    name: "Product"
}, v.object({
    link: schemaLink
}).additional(true));

export interface Product {
    link?: Link;
    [key: string]: any;
}

/**
 * ## Validate that a variable is a Product
 *
 * @returns ValidationResult
 */
export const validateProduct = compile(schemaProduct);

/**
 * ## Ensure a variable is a Product
 *
 * This call will throw a ValidationError if the variable isn't a Product.
 *
 * If the variable **is** a Product, the returned variable will be of that type.
 */
export const ensureProduct = compile<typeof schemaProduct, Product>(schemaProduct, { ensure: true });

/**
 * ## Validates that a variable is a Product
 *
 * @returns boolean
 */
export const isProduct = compile(schemaProduct, { simple: true });

/** The validation schema for a Email */
export const schemaEmail = suretype({
    name: "Email"
}, v.any());

export type Email = any;

/**
 * ## Validate that a variable is a Email
 *
 * @returns ValidationResult
 */
export const validateEmail = compile(schemaEmail);

/**
 * ## Ensure a variable is a Email
 *
 * This call will throw a ValidationError if the variable isn't a Email.
 *
 * If the variable **is** a Email, the returned variable will be of that type.
 */
export const ensureEmail = compile<typeof schemaEmail, Email>(schemaEmail, { ensure: true });

/**
 * ## Validates that a variable is a Email
 *
 * @returns boolean
 */
export const isEmail = compile(schemaEmail, { simple: true });

/** The validation schema for a User */
export const schemaUser = suretype({
    name: "User",
    description: "The User type\\nyada yada"
}, v.object({
    obj: annotate({
        description: "This is a relatively long title, triggering line breaks\\n\\nThis is a typical foo\\n\\n@default\\n    {\\n      \\"prop\\": \\"there is currently no default provided...\\"\\n    }"
    }, v.object({
        prop: v.string()
    }).additional(true).default({
        prop: "there is currently no default provided..."
    }).required()),
    arr: v.array(v.boolean()).minItems(2).maxItems(5).required(),
    tup: v.array([
        v.string(),
        v.number()
    ]).additional(v.boolean()),
    str: v.string().minLength(3).anyOf([v.string().format("email"), v.string().format("ipv4")]),
    num: v.number().gte(5).lt(10).required(),
    int: v.number().integer().enum(1, 2, 3, 4, 5, 10),
    email: schemaEmail,
    bool: v.boolean().const(false).required(),
    nul: v.null(),
    any_of: v.anyOf([v.string(), v.number()]),
    all_of: v.allOf([v.object({
            x: annotate({
                description: "This is the x number"
            }, v.number())
        }).additional(true), v.string()])
}));

/**
 * The User type
 * yada yada
 */
export interface User {
    /**
     * This is a relatively long title, triggering line breaks
     *
     * This is a typical foo
     *
     * @default
     *     {
     *       "prop": "there is currently no default provided..."
     *     }
     */
    obj: {
        prop?: string;
        [key: string]: any;
    };
    arr: boolean[];
    tup?: [
        string,
        number,
        ...boolean[]
    ];
    str?: any;
    num: number;
    int?: 1 | 2 | 3 | 4 | 5 | 10;
    email?: Email;
    bool: boolean;
    nul?: null;
    any_of?: string | number;
    all_of?: {
        /** This is the x number */
        x?: number;
        [key: string]: any;
    } & string;
}

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });
"
`;

exports[`convertJsonSchemaToSureType non-recursive types export matrix 3`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile, annotate, TypeOf } from 'suretype';

const schemaLink = suretype({
    name: "Link"
}, v.object({
    url: v.string(),
    meta: v.any()
}).additional(true));

export type Link = TypeOf<typeof schemaLink>;

/**
 * ## Validate that a variable is a Link
 *
 * @returns ValidationResult
 */
export const validateLink = compile(schemaLink);

/**
 * ## Ensure a variable is a Link
 *
 * This call will throw a ValidationError if the variable isn't a Link.
 *
 * If the variable **is** a Link, the returned variable will be of that type.
 */
export const ensureLink = compile<typeof schemaLink, Link>(schemaLink, { ensure: true });

/**
 * ## Validates that a variable is a Link
 *
 * @returns boolean
 */
export const isLink = compile(schemaLink, { simple: true });

const schemaProduct = suretype({
    name: "Product"
}, v.object({
    link: schemaLink
}).additional(true));

export type Product = TypeOf<typeof schemaProduct>;

/**
 * ## Validate that a variable is a Product
 *
 * @returns ValidationResult
 */
export const validateProduct = compile(schemaProduct);

/**
 * ## Ensure a variable is a Product
 *
 * This call will throw a ValidationError if the variable isn't a Product.
 *
 * If the variable **is** a Product, the returned variable will be of that type.
 */
export const ensureProduct = compile<typeof schemaProduct, Product>(schemaProduct, { ensure: true });

/**
 * ## Validates that a variable is a Product
 *
 * @returns boolean
 */
export const isProduct = compile(schemaProduct, { simple: true });

const schemaEmail = suretype({
    name: "Email"
}, v.any());

export type Email = TypeOf<typeof schemaEmail>;

/**
 * ## Validate that a variable is a Email
 *
 * @returns ValidationResult
 */
export const validateEmail = compile(schemaEmail);

/**
 * ## Ensure a variable is a Email
 *
 * This call will throw a ValidationError if the variable isn't a Email.
 *
 * If the variable **is** a Email, the returned variable will be of that type.
 */
export const ensureEmail = compile<typeof schemaEmail, Email>(schemaEmail, { ensure: true });

/**
 * ## Validates that a variable is a Email
 *
 * @returns boolean
 */
export const isEmail = compile(schemaEmail, { simple: true });

const schemaUser = suretype({
    name: "User",
    description: "The User type\\nyada yada"
}, v.object({
    obj: annotate({
        description: "This is a relatively long title, triggering line breaks\\n\\nThis is a typical foo\\n\\n@default\\n    {\\n      \\"prop\\": \\"there is currently no default provided...\\"\\n    }"
    }, v.object({
        prop: v.string()
    }).additional(true).default({
        prop: "there is currently no default provided..."
    }).required()),
    arr: v.array(v.boolean()).minItems(2).maxItems(5).required(),
    tup: v.array([
        v.string(),
        v.number()
    ]).additional(v.boolean()),
    str: v.string().minLength(3).anyOf([v.string().format("email"), v.string().format("ipv4")]),
    num: v.number().gte(5).lt(10).required(),
    int: v.number().integer().enum(1, 2, 3, 4, 5, 10),
    email: schemaEmail,
    bool: v.boolean().const(false).required(),
    nul: v.null(),
    any_of: v.anyOf([v.string(), v.number()]),
    all_of: v.allOf([v.object({
            x: annotate({
                description: "This is the x number"
            }, v.number())
        }).additional(true), v.string()])
}));

export type User = TypeOf<typeof schemaUser>;

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });
"
`;

exports[`convertJsonSchemaToSureType non-recursive types export matrix 4`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile, annotate, TypeOf } from 'suretype';

/** The validation schema for a Link */
export const schemaLink = suretype({
    name: "Link"
}, v.object({
    url: v.string(),
    meta: v.any()
}).additional(true));

type Link = TypeOf<typeof schemaLink>;

/**
 * ## Validate that a variable is a Link
 *
 * @returns ValidationResult
 */
export const validateLink = compile(schemaLink);

/**
 * ## Ensure a variable is a Link
 *
 * This call will throw a ValidationError if the variable isn't a Link.
 *
 * If the variable **is** a Link, the returned variable will be of that type.
 */
export const ensureLink = compile<typeof schemaLink, Link>(schemaLink, { ensure: true });

/**
 * ## Validates that a variable is a Link
 *
 * @returns boolean
 */
export const isLink = compile(schemaLink, { simple: true });

/** The validation schema for a Product */
export const schemaProduct = suretype({
    name: "Product"
}, v.object({
    link: schemaLink
}).additional(true));

type Product = TypeOf<typeof schemaProduct>;

/**
 * ## Validate that a variable is a Product
 *
 * @returns ValidationResult
 */
export const validateProduct = compile(schemaProduct);

/**
 * ## Ensure a variable is a Product
 *
 * This call will throw a ValidationError if the variable isn't a Product.
 *
 * If the variable **is** a Product, the returned variable will be of that type.
 */
export const ensureProduct = compile<typeof schemaProduct, Product>(schemaProduct, { ensure: true });

/**
 * ## Validates that a variable is a Product
 *
 * @returns boolean
 */
export const isProduct = compile(schemaProduct, { simple: true });

/** The validation schema for a Email */
export const schemaEmail = suretype({
    name: "Email"
}, v.any());

type Email = TypeOf<typeof schemaEmail>;

/**
 * ## Validate that a variable is a Email
 *
 * @returns ValidationResult
 */
export const validateEmail = compile(schemaEmail);

/**
 * ## Ensure a variable is a Email
 *
 * This call will throw a ValidationError if the variable isn't a Email.
 *
 * If the variable **is** a Email, the returned variable will be of that type.
 */
export const ensureEmail = compile<typeof schemaEmail, Email>(schemaEmail, { ensure: true });

/**
 * ## Validates that a variable is a Email
 *
 * @returns boolean
 */
export const isEmail = compile(schemaEmail, { simple: true });

/** The validation schema for a User */
export const schemaUser = suretype({
    name: "User",
    description: "The User type\\nyada yada"
}, v.object({
    obj: annotate({
        description: "This is a relatively long title, triggering line breaks\\n\\nThis is a typical foo\\n\\n@default\\n    {\\n      \\"prop\\": \\"there is currently no default provided...\\"\\n    }"
    }, v.object({
        prop: v.string()
    }).additional(true).default({
        prop: "there is currently no default provided..."
    }).required()),
    arr: v.array(v.boolean()).minItems(2).maxItems(5).required(),
    tup: v.array([
        v.string(),
        v.number()
    ]).additional(v.boolean()),
    str: v.string().minLength(3).anyOf([v.string().format("email"), v.string().format("ipv4")]),
    num: v.number().gte(5).lt(10).required(),
    int: v.number().integer().enum(1, 2, 3, 4, 5, 10),
    email: schemaEmail,
    bool: v.boolean().const(false).required(),
    nul: v.null(),
    any_of: v.anyOf([v.string(), v.number()]),
    all_of: v.allOf([v.object({
            x: annotate({
                description: "This is the x number"
            }, v.number())
        }).additional(true), v.string()])
}));

type User = TypeOf<typeof schemaUser>;

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });
"
`;

exports[`convertJsonSchemaToSureType non-recursive types export matrix 5`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile, annotate, TypeOf } from 'suretype';

/** The validation schema for a Link */
export const schemaLink = suretype({
    name: "Link"
}, v.object({
    url: v.string(),
    meta: v.any()
}).additional(true));

export type Link = TypeOf<typeof schemaLink>;

/**
 * ## Ensure a variable is a Link
 *
 * This call will throw a ValidationError if the variable isn't a Link.
 *
 * If the variable **is** a Link, the returned variable will be of that type.
 */
export const ensureLink = compile<typeof schemaLink, Link>(schemaLink, { ensure: true });

/**
 * ## Validates that a variable is a Link
 *
 * @returns boolean
 */
export const isLink = compile(schemaLink, { simple: true });

/** The validation schema for a Product */
export const schemaProduct = suretype({
    name: "Product"
}, v.object({
    link: schemaLink
}).additional(true));

export type Product = TypeOf<typeof schemaProduct>;

/**
 * ## Ensure a variable is a Product
 *
 * This call will throw a ValidationError if the variable isn't a Product.
 *
 * If the variable **is** a Product, the returned variable will be of that type.
 */
export const ensureProduct = compile<typeof schemaProduct, Product>(schemaProduct, { ensure: true });

/**
 * ## Validates that a variable is a Product
 *
 * @returns boolean
 */
export const isProduct = compile(schemaProduct, { simple: true });

/** The validation schema for a Email */
export const schemaEmail = suretype({
    name: "Email"
}, v.any());

export type Email = TypeOf<typeof schemaEmail>;

/**
 * ## Ensure a variable is a Email
 *
 * This call will throw a ValidationError if the variable isn't a Email.
 *
 * If the variable **is** a Email, the returned variable will be of that type.
 */
export const ensureEmail = compile<typeof schemaEmail, Email>(schemaEmail, { ensure: true });

/**
 * ## Validates that a variable is a Email
 *
 * @returns boolean
 */
export const isEmail = compile(schemaEmail, { simple: true });

/** The validation schema for a User */
export const schemaUser = suretype({
    name: "User",
    description: "The User type\\nyada yada"
}, v.object({
    obj: annotate({
        description: "This is a relatively long title, triggering line breaks\\n\\nThis is a typical foo\\n\\n@default\\n    {\\n      \\"prop\\": \\"there is currently no default provided...\\"\\n    }"
    }, v.object({
        prop: v.string()
    }).additional(true).default({
        prop: "there is currently no default provided..."
    }).required()),
    arr: v.array(v.boolean()).minItems(2).maxItems(5).required(),
    tup: v.array([
        v.string(),
        v.number()
    ]).additional(v.boolean()),
    str: v.string().minLength(3).anyOf([v.string().format("email"), v.string().format("ipv4")]),
    num: v.number().gte(5).lt(10).required(),
    int: v.number().integer().enum(1, 2, 3, 4, 5, 10),
    email: schemaEmail,
    bool: v.boolean().const(false).required(),
    nul: v.null(),
    any_of: v.anyOf([v.string(), v.number()]),
    all_of: v.allOf([v.object({
            x: annotate({
                description: "This is the x number"
            }, v.number())
        }).additional(true), v.string()])
}));

export type User = TypeOf<typeof schemaUser>;

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });
"
`;

exports[`convertJsonSchemaToSureType non-recursive types export matrix 6`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile, annotate, TypeOf } from 'suretype';

/** The validation schema for a Link */
export const schemaLink = suretype({
    name: "Link"
}, v.object({
    url: v.string(),
    meta: v.any()
}).additional(true));

export type Link = TypeOf<typeof schemaLink>;

/**
 * ## Validate that a variable is a Link
 *
 * @returns ValidationResult
 */
export const validateLink = compile(schemaLink);

/**
 * ## Validates that a variable is a Link
 *
 * @returns boolean
 */
export const isLink = compile(schemaLink, { simple: true });

/** The validation schema for a Product */
export const schemaProduct = suretype({
    name: "Product"
}, v.object({
    link: schemaLink
}).additional(true));

export type Product = TypeOf<typeof schemaProduct>;

/**
 * ## Validate that a variable is a Product
 *
 * @returns ValidationResult
 */
export const validateProduct = compile(schemaProduct);

/**
 * ## Validates that a variable is a Product
 *
 * @returns boolean
 */
export const isProduct = compile(schemaProduct, { simple: true });

/** The validation schema for a Email */
export const schemaEmail = suretype({
    name: "Email"
}, v.any());

export type Email = TypeOf<typeof schemaEmail>;

/**
 * ## Validate that a variable is a Email
 *
 * @returns ValidationResult
 */
export const validateEmail = compile(schemaEmail);

/**
 * ## Validates that a variable is a Email
 *
 * @returns boolean
 */
export const isEmail = compile(schemaEmail, { simple: true });

/** The validation schema for a User */
export const schemaUser = suretype({
    name: "User",
    description: "The User type\\nyada yada"
}, v.object({
    obj: annotate({
        description: "This is a relatively long title, triggering line breaks\\n\\nThis is a typical foo\\n\\n@default\\n    {\\n      \\"prop\\": \\"there is currently no default provided...\\"\\n    }"
    }, v.object({
        prop: v.string()
    }).additional(true).default({
        prop: "there is currently no default provided..."
    }).required()),
    arr: v.array(v.boolean()).minItems(2).maxItems(5).required(),
    tup: v.array([
        v.string(),
        v.number()
    ]).additional(v.boolean()),
    str: v.string().minLength(3).anyOf([v.string().format("email"), v.string().format("ipv4")]),
    num: v.number().gte(5).lt(10).required(),
    int: v.number().integer().enum(1, 2, 3, 4, 5, 10),
    email: schemaEmail,
    bool: v.boolean().const(false).required(),
    nul: v.null(),
    any_of: v.anyOf([v.string(), v.number()]),
    all_of: v.allOf([v.object({
            x: annotate({
                description: "This is the x number"
            }, v.number())
        }).additional(true), v.string()])
}));

export type User = TypeOf<typeof schemaUser>;

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });
"
`;

exports[`convertJsonSchemaToSureType non-recursive types export matrix 7`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile, annotate, TypeOf } from 'suretype';

/** The validation schema for a Link */
export const schemaLink = suretype({
    name: "Link"
}, v.object({
    url: v.string(),
    meta: v.any()
}).additional(true));

export type Link = TypeOf<typeof schemaLink>;

/**
 * ## Validate that a variable is a Link
 *
 * @returns ValidationResult
 */
export const validateLink = compile(schemaLink);

/**
 * ## Ensure a variable is a Link
 *
 * This call will throw a ValidationError if the variable isn't a Link.
 *
 * If the variable **is** a Link, the returned variable will be of that type.
 */
export const ensureLink = compile<typeof schemaLink, Link>(schemaLink, { ensure: true });

/** The validation schema for a Product */
export const schemaProduct = suretype({
    name: "Product"
}, v.object({
    link: schemaLink
}).additional(true));

export type Product = TypeOf<typeof schemaProduct>;

/**
 * ## Validate that a variable is a Product
 *
 * @returns ValidationResult
 */
export const validateProduct = compile(schemaProduct);

/**
 * ## Ensure a variable is a Product
 *
 * This call will throw a ValidationError if the variable isn't a Product.
 *
 * If the variable **is** a Product, the returned variable will be of that type.
 */
export const ensureProduct = compile<typeof schemaProduct, Product>(schemaProduct, { ensure: true });

/** The validation schema for a Email */
export const schemaEmail = suretype({
    name: "Email"
}, v.any());

export type Email = TypeOf<typeof schemaEmail>;

/**
 * ## Validate that a variable is a Email
 *
 * @returns ValidationResult
 */
export const validateEmail = compile(schemaEmail);

/**
 * ## Ensure a variable is a Email
 *
 * This call will throw a ValidationError if the variable isn't a Email.
 *
 * If the variable **is** a Email, the returned variable will be of that type.
 */
export const ensureEmail = compile<typeof schemaEmail, Email>(schemaEmail, { ensure: true });

/** The validation schema for a User */
export const schemaUser = suretype({
    name: "User",
    description: "The User type\\nyada yada"
}, v.object({
    obj: annotate({
        description: "This is a relatively long title, triggering line breaks\\n\\nThis is a typical foo\\n\\n@default\\n    {\\n      \\"prop\\": \\"there is currently no default provided...\\"\\n    }"
    }, v.object({
        prop: v.string()
    }).additional(true).default({
        prop: "there is currently no default provided..."
    }).required()),
    arr: v.array(v.boolean()).minItems(2).maxItems(5).required(),
    tup: v.array([
        v.string(),
        v.number()
    ]).additional(v.boolean()),
    str: v.string().minLength(3).anyOf([v.string().format("email"), v.string().format("ipv4")]),
    num: v.number().gte(5).lt(10).required(),
    int: v.number().integer().enum(1, 2, 3, 4, 5, 10),
    email: schemaEmail,
    bool: v.boolean().const(false).required(),
    nul: v.null(),
    any_of: v.anyOf([v.string(), v.number()]),
    all_of: v.allOf([v.object({
            x: annotate({
                description: "This is the x number"
            }, v.number())
        }).additional(true), v.string()])
}));

export type User = TypeOf<typeof schemaUser>;

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });
"
`;

exports[`convertJsonSchemaToSureType non-recursive types export matrix 8`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, raw, compile } from 'suretype';

const rawSchemaObject = {
    definitions: {
        Link: {
            type: "object",
            properties: {
                url: {
                    type: "string"
                },
                meta: {}
            }
        },
        Product: {
            type: "object",
            properties: {
                link: {
                    $ref: "#/definitions/Link"
                }
            }
        },
        Email: {},
        User: {
            type: "object",
            description: "The User type\\nyada yada",
            properties: {
                obj: {
                    type: "object",
                    description: "This is a relatively long title, triggering line breaks\\n\\nThis is a typical foo",
                    default: {
                        prop: "there is currently no default provided..."
                    },
                    properties: {
                        prop: {
                            type: "string"
                        }
                    }
                },
                arr: {
                    type: "array",
                    items: {
                        type: "boolean"
                    },
                    minItems: 2,
                    maxItems: 5
                },
                tup: {
                    type: "array",
                    items: [{
                            type: "string"
                        }, {
                            type: "number"
                        }],
                    additionalItems: {
                        type: "boolean"
                    }
                },
                str: {
                    type: "string",
                    minLength: 3,
                    anyOf: [{
                            format: "email"
                        }, {
                            format: "ipv4"
                        }]
                },
                num: {
                    type: "number",
                    minimum: 5,
                    maximum: 10
                },
                int: {
                    type: "integer",
                    enum: [1, 2, 3, 4, 5, 10]
                },
                email: {
                    $ref: "#/definitions/Email"
                },
                bool: {
                    type: "boolean",
                    const: false
                },
                nul: {
                    type: "null"
                },
                any_of: {
                    anyOf: [{
                            type: "string"
                        }, {
                            type: "number"
                        }]
                },
                all_of: {
                    allOf: [{
                            type: "object",
                            properties: {
                                x: {
                                    description: "This is the x number",
                                    type: "number"
                                }
                            }
                        }, {
                            type: "string"
                        }]
                }
            },
            required: ["obj", "arr", "num", "bool"],
            additionalProperties: false
        }
    }
};

/** The validation schema for a Link */
export const schemaLink = raw<Link>(rawSchemaObject, "Link");

export interface Link {
    url?: string;
    meta?: any;
    [key: string]: any;
}

/**
 * ## Validate that a variable is a Link
 *
 * @returns ValidationResult
 */
export const validateLink = compile(schemaLink);

/**
 * ## Ensure a variable is a Link
 *
 * This call will throw a ValidationError if the variable isn't a Link.
 *
 * If the variable **is** a Link, the returned variable will be of that type.
 */
export const ensureLink = compile<typeof schemaLink, Link>(schemaLink, { ensure: true });

/**
 * ## Validates that a variable is a Link
 *
 * @returns boolean
 */
export const isLink = compile(schemaLink, { simple: true });

/** The validation schema for a Product */
export const schemaProduct = raw<Product>(rawSchemaObject, "Product");

export interface Product {
    link?: Link;
    [key: string]: any;
}

/**
 * ## Validate that a variable is a Product
 *
 * @returns ValidationResult
 */
export const validateProduct = compile(schemaProduct);

/**
 * ## Ensure a variable is a Product
 *
 * This call will throw a ValidationError if the variable isn't a Product.
 *
 * If the variable **is** a Product, the returned variable will be of that type.
 */
export const ensureProduct = compile<typeof schemaProduct, Product>(schemaProduct, { ensure: true });

/**
 * ## Validates that a variable is a Product
 *
 * @returns boolean
 */
export const isProduct = compile(schemaProduct, { simple: true });

/** The validation schema for a Email */
export const schemaEmail = raw<Email>(rawSchemaObject, "Email");

export type Email = any;

/**
 * ## Validate that a variable is a Email
 *
 * @returns ValidationResult
 */
export const validateEmail = compile(schemaEmail);

/**
 * ## Ensure a variable is a Email
 *
 * This call will throw a ValidationError if the variable isn't a Email.
 *
 * If the variable **is** a Email, the returned variable will be of that type.
 */
export const ensureEmail = compile<typeof schemaEmail, Email>(schemaEmail, { ensure: true });

/**
 * ## Validates that a variable is a Email
 *
 * @returns boolean
 */
export const isEmail = compile(schemaEmail, { simple: true });

/** The validation schema for a User */
export const schemaUser = raw<User>(rawSchemaObject, "User");

/**
 * The User type
 * yada yada
 */
export interface User {
    /**
     * This is a relatively long title, triggering line breaks
     *
     * This is a typical foo
     *
     * @default
     *     {
     *       "prop": "there is currently no default provided..."
     *     }
     */
    obj: {
        prop?: string;
        [key: string]: any;
    };
    arr: boolean[];
    tup?: [
        string,
        number,
        ...boolean[]
    ];
    str?: any;
    num: number;
    int?: 1 | 2 | 3 | 4 | 5 | 10;
    email?: Email;
    bool: boolean;
    nul?: null;
    any_of?: string | number;
    all_of?: {
        /** This is the x number */
        x?: number;
        [key: string]: any;
    } & string;
}

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });
"
`;

exports[`convertJsonSchemaToSureType should add user package header properly 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype on behalf of my-package, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 *  - {@link https://my-package.com}
 */

import { suretype, v, raw, compile } from 'suretype';

const rawSchemaObject = {
    definitions: {
        User: {
            type: "string"
        }
    }
};

/** The validation schema for a User */
export const schemaUser = raw<User>(rawSchemaObject, "User");

export type User = string;

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });
"
`;

exports[`convertJsonSchemaToSureType should handle _required_ on referenced type 1`] = `
"import { suretype, v, compile, annotate, TypeOf } from 'suretype';

const schemaA = suretype({
    name: "A",
    title: "A"
}, v.object({}));

export type A = TypeOf<typeof schemaA>;

/**
 * ## Validate that a variable is a A
 *
 * @returns ValidationResult
 */
export const validateA = compile(schemaA);

const schemaB = suretype({
    name: "B",
    title: "B"
}, v.object({
    a: annotate({
        title: "B.a"
    }, schemaA.required())
}));

export type B = TypeOf<typeof schemaB>;

/**
 * ## Validate that a variable is a B
 *
 * @returns ValidationResult
 */
export const validateB = compile(schemaB);
"
`;

exports[`convertJsonSchemaToSureType should warn and ignore on missing ref 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile } from 'suretype';

/** The validation schema for a Link */
export const schemaLink = suretype({
    name: "Link"
}, v.unknown());

export type Link = unknown;

/**
 * ## Validate that a variable is a Link
 *
 * @returns ValidationResult
 */
export const validateLink = compile(schemaLink);

/**
 * ## Ensure a variable is a Link
 *
 * This call will throw a ValidationError if the variable isn't a Link.
 *
 * If the variable **is** a Link, the returned variable will be of that type.
 */
export const ensureLink = compile<typeof schemaLink, Link>(schemaLink, { ensure: true });

/**
 * ## Validates that a variable is a Link
 *
 * @returns boolean
 */
export const isLink = compile(schemaLink, { simple: true });

/** The validation schema for a User */
export const schemaUser = suretype({
    name: "User"
}, v.object({
    prop: schemaLink
}).additional(true));

export interface User {
    prop?: Link;
    [key: string]: unknown;
}

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });
"
`;
