// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`core-types-to-suretype complex type 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile } from 'suretype';

/** The validation schema for a User */
export const schemaUser = suretype({
    name: "User"
}, v.string());

export type User = string;

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });

/** The validation schema for a foo */
export const schemaFoo = suretype({
    name: "foo"
}, v.object({
    bar: v.string(),
    baz: v.anyOf([v.number(), v.object({}).additional(v.boolean())]).required(),
    bak: v.object({}).additional(true).required(),
    tupleWithAdditionals: v.array([
        v.string()
    ]).minItems(1).additional(v.number()).required(),
    tupleWithObjectAdditionals: v.array([
        v.string()
    ]).minItems(1).additional(v.object({
        x: schemaUser
    })).required()
}));

export interface foo {
    bar?: string;
    baz: number | {
        [key: string]: boolean;
    };
    bak: {
        [key: string]: unknown;
    };
    tupleWithAdditionals: [
        string,
        ...number[]
    ];
    tupleWithObjectAdditionals: [
        string,
        ...{
            x?: User;
        }[]
    ];
}

/**
 * ## Validate that a variable is a foo
 *
 * @returns ValidationResult
 */
export const validateFoo = compile(schemaFoo);

/**
 * ## Ensure a variable is a foo
 *
 * This call will throw a ValidationError if the variable isn't a foo.
 *
 * If the variable **is** a foo, the returned variable will be of that type.
 */
export const ensureFoo = compile<typeof schemaFoo, foo>(schemaFoo, { ensure: true });

/**
 * ## Validates that a variable is a foo
 *
 * @returns boolean
 */
export const isFoo = compile(schemaFoo, { simple: true });
"
`;

exports[`core-types-to-suretype should write annotations properly 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile, annotate } from 'suretype';

/** The validation schema for a Thing */
export const schemaThing = suretype({
    name: "Thing"
}, v.unknown());

export type Thing = unknown;

/**
 * ## Validate that a variable is a Thing
 *
 * @returns ValidationResult
 */
export const validateThing = compile(schemaThing);

/**
 * ## Ensure a variable is a Thing
 *
 * This call will throw a ValidationError if the variable isn't a Thing.
 *
 * If the variable **is** a Thing, the returned variable will be of that type.
 */
export const ensureThing = compile<typeof schemaThing, Thing>(schemaThing, { ensure: true });

/**
 * ## Validates that a variable is a Thing
 *
 * @returns boolean
 */
export const isThing = compile(schemaThing, { simple: true });

/** The validation schema for a Thingy */
export const schemaThingy = suretype({
    name: "Thingy",
    title: "Thingy",
    description: "Thing ref"
}, v.anyOf([annotate({
        title: "Thingy",
        description: "Thing is the preferred type\\n\\n@see The Thing documentation"
    }, schemaThing), annotate({
        title: "Thingy",
        description: "Just a number"
    }, v.number())]));

export type Thingy = Thing | /** Just a number */
number;

/**
 * ## Validate that a variable is a Thingy
 *
 * @returns ValidationResult
 */
export const validateThingy = compile(schemaThingy);

/**
 * ## Ensure a variable is a Thingy
 *
 * This call will throw a ValidationError if the variable isn't a Thingy.
 *
 * If the variable **is** a Thingy, the returned variable will be of that type.
 */
export const ensureThingy = compile<typeof schemaThingy, Thingy>(schemaThingy, { ensure: true });

/**
 * ## Validates that a variable is a Thingy
 *
 * @returns boolean
 */
export const isThingy = compile(schemaThingy, { simple: true });

/** The validation schema for a User */
export const schemaUser = suretype({
    name: "User",
    title: "User",
    examples: ["[\\n  \\"{ name: \\\\\\"Joe\\\\\\" }\\"\\n]"],
    description: "User type\\n\\nThis type holds the user information, such as name\\n\\n@see http://username\\n\\n@default\\n    { user: \\"\\" }"
}, v.object({
    name: annotate({
        title: "User.name",
        description: "The real name\\n\\nMust be a valid name, not */"
    }, v.string().required())
}).default("{ user: \\"\\" }"));

/**
 * User type
 *
 * This type holds the user information, such as name
 *
 * @example
 *     [
 *       "{ name: \\"Joe\\" }"
 *     ]
 *
 * @default
 *     { user: "" }
 *
 * @see http://username
 */
export interface User {
    /**
     * The real name
     *
     * Must be a valid name, not *\\/
     */
    name: string;
}

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });

/** The validation schema for a ChatLine */
export const schemaChatLine = suretype({
    name: "ChatLine",
    title: "ChatLine",
    description: "A chat line"
}, v.object({
    user: annotate({
        title: "ChatLine.user",
        description: "User ref"
    }, schemaUser),
    line: annotate({
        examples: ["This is a line"]
    }, v.string().required())
}));

/** A chat line */
export interface ChatLine {
    user: User;
    /**
     * @example
     *     This is a line
     */
    line: string;
}

/**
 * ## Validate that a variable is a ChatLine
 *
 * @returns ValidationResult
 */
export const validateChatLine = compile(schemaChatLine);

/**
 * ## Ensure a variable is a ChatLine
 *
 * This call will throw a ValidationError if the variable isn't a ChatLine.
 *
 * If the variable **is** a ChatLine, the returned variable will be of that type.
 */
export const ensureChatLine = compile<typeof schemaChatLine, ChatLine>(schemaChatLine, { ensure: true });

/**
 * ## Validates that a variable is a ChatLine
 *
 * @returns boolean
 */
export const isChatLine = compile(schemaChatLine, { simple: true });
"
`;

exports[`core-types-to-suretype simple string union of separate types 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile } from 'suretype';

/** The validation schema for a bar */
export const schemaBar = suretype({
    name: "bar"
}, v.string().const("bar"));

export type bar = "bar";

/**
 * ## Validate that a variable is a bar
 *
 * @returns ValidationResult
 */
export const validateBar = compile(schemaBar);

/**
 * ## Ensure a variable is a bar
 *
 * This call will throw a ValidationError if the variable isn't a bar.
 *
 * If the variable **is** a bar, the returned variable will be of that type.
 */
export const ensureBar = compile<typeof schemaBar, bar>(schemaBar, { ensure: true });

/**
 * ## Validates that a variable is a bar
 *
 * @returns boolean
 */
export const isBar = compile(schemaBar, { simple: true });

/** The validation schema for a foo */
export const schemaFoo = suretype({
    name: "foo"
}, v.anyOf([schemaBar, v.string().enum("foo", "baz")]));

export type foo = bar | ("foo" | "baz");

/**
 * ## Validate that a variable is a foo
 *
 * @returns ValidationResult
 */
export const validateFoo = compile(schemaFoo);

/**
 * ## Ensure a variable is a foo
 *
 * This call will throw a ValidationError if the variable isn't a foo.
 *
 * If the variable **is** a foo, the returned variable will be of that type.
 */
export const ensureFoo = compile<typeof schemaFoo, foo>(schemaFoo, { ensure: true });

/**
 * ## Validates that a variable is a foo
 *
 * @returns boolean
 */
export const isFoo = compile(schemaFoo, { simple: true });
"
`;

exports[`core-types-to-suretype simple type 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile } from 'suretype';

/** The validation schema for a foo */
export const schemaFoo = suretype({
    name: "foo"
}, v.string());

export type foo = string;

/**
 * ## Validate that a variable is a foo
 *
 * @returns ValidationResult
 */
export const validateFoo = compile(schemaFoo);

/**
 * ## Ensure a variable is a foo
 *
 * This call will throw a ValidationError if the variable isn't a foo.
 *
 * If the variable **is** a foo, the returned variable will be of that type.
 */
export const ensureFoo = compile<typeof schemaFoo, foo>(schemaFoo, { ensure: true });

/**
 * ## Validates that a variable is a foo
 *
 * @returns boolean
 */
export const isFoo = compile(schemaFoo, { simple: true });
"
`;

exports[`core-types-to-suretype used in readme 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-suretype, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-suretype}
 */

import { suretype, v, compile, annotate } from 'suretype';

/** The validation schema for a User */
export const schemaUser = suretype({
    name: "User",
    title: "User",
    description: "User type\\n\\nThis type holds the user information, such as name"
}, v.object({
    name: annotate({
        description: "The real name"
    }, v.string().required())
}));

/**
 * User type
 *
 * This type holds the user information, such as name
 */
export interface User {
    /** The real name */
    name: string;
}

/**
 * ## Validate that a variable is a User
 *
 * @returns ValidationResult
 */
export const validateUser = compile(schemaUser);

/**
 * ## Ensure a variable is a User
 *
 * This call will throw a ValidationError if the variable isn't a User.
 *
 * If the variable **is** a User, the returned variable will be of that type.
 */
export const ensureUser = compile<typeof schemaUser, User>(schemaUser, { ensure: true });

/**
 * ## Validates that a variable is a User
 *
 * @returns boolean
 */
export const isUser = compile(schemaUser, { simple: true });

/** The validation schema for a ChatLine */
export const schemaChatLine = suretype({
    name: "ChatLine",
    title: "ChatLine",
    description: "A chat line"
}, v.object({
    user: schemaUser,
    line: v.string().required()
}));

/** A chat line */
export interface ChatLine {
    user: User;
    line: string;
}

/**
 * ## Validate that a variable is a ChatLine
 *
 * @returns ValidationResult
 */
export const validateChatLine = compile(schemaChatLine);

/**
 * ## Ensure a variable is a ChatLine
 *
 * This call will throw a ValidationError if the variable isn't a ChatLine.
 *
 * If the variable **is** a ChatLine, the returned variable will be of that type.
 */
export const ensureChatLine = compile<typeof schemaChatLine, ChatLine>(schemaChatLine, { ensure: true });

/**
 * ## Validates that a variable is a ChatLine
 *
 * @returns boolean
 */
export const isChatLine = compile(schemaChatLine, { simple: true });
"
`;
